## Preprocessing Steps

**I. Basic Data Cleaning**

1. Drop all orders that where cancelled (column `cancellation_flag`)
2. Cast values of returned items as integer and fill NaN as 0 (zero) (`return_quantity`)
3. Summarise naming conventions of old shops and drop 'UNKOWN' values (`webshop_country`)
4. Only keep orders from DACH countries ('DE', 'AT', 'CH') (`webshop_country`)
5. Only keep postal codes that fit format requirements for DACH countries (`shipping_post_code`)
6. Drop illogical, non-positive order values (`net_order_value_euros`)
7. Drop now useless, reduntant columns: `quantity_sold` and `cancellation_flag` (contain only one unique value)
8. Convert order date into quarterly and monthly dates (`order_data` -> `year_quarter`, `year_month`)


**II. Addition of Store Distances**

A. Creation of Geo-Coordinate Dataset (see standalone notebook `Geographic_Coordinate_Dataset.ipynb`)
1. Load main dataset (that was cleaned in previous step)
2. Extract unique post codes
3. Retrieve postal code coordinates (latitude, longitude) from GoogleMapsAPI for each postal code and country
4. Add credit score for each postal code

  4.1 Load and clean credit score dataset provided by the company (remove duplicates, assume data to be from Germany, correct postal codes starting with 0)

  4.2 merge it with main dataset

6. Retrieve additional postal code coordinates from `pgeocode` (to supplement GoogleMapsAPI's data)
7. Retrieve additional postal code coordinates from suche-postleitzahl.org dataset (to supplement GoogleMapsAPI)
8. Add population density from this dataset
9. Review all coordinates and keep only logical coordinates
10. Fill missing credit score and population density data with mean
11. Calculate for each postal code the distance to each store based on geographic coordinates (using haversine distance)


B. Merge Data to Main Dataset (following here)
1. Load Geo-Coordinates Dataset
2. Only keep information concerning distances to stores
3. Load main dataset
4. Merge both datasets
5. Save result



**III. Treatment**

1. Determine treatment parametres (default - country:'DE', distance: 50km)
2. Apply Treatment Function:

  2.1 Assign treatment where distance to store is smaller than treatment distance parametre (`treatment` = 1) and add name of treatment store

  2.2 Take closer store if two (or more) stores are within treatment distance parametre

  2.3 Assign (Control) Groups (`Group`):

    2.3.1 *'Treatment' if within distance*

    2.3.2 *'Eary_Store' if within distance but store opening before certain date*

    2.3.3 *'Non_Store' if not within distance to any store (set `Treatment` = 0)*

  2.4 Assign pre- or post-treatment (`Post`), and set treatment to 0 if before store opening (`Treatment` = 0)

  2.5 Keep distance to treatment store if after treatment (`treatment_store_distance`)
  2.6 Keep distance to treatment store if before treatment (`non_treated_store_distance`)

3. Keep only German orders

4. Save Dataset

**IV. Aggregation**

1. Drop obsolete columns (`Treatment_store_2`)
2. Split auxiliary dataframe with time-invariant columns
3. Complete dataset as balanced panel
4. Aggregate time-variant data (return quantity, order value, num of orders, items per order) over postal code and quarter
5. Merge auxiliary time-invariant dataframe and aggregated time-variant dataframe back together
6. Calculate differences between each order date and store opening date (adding a new column for each store)

**V. Additional Values**

1. Load Main Dataset (cleaned, with distances, treated and aggregated)
2. Load Geo-Coordinate Dataset again and keep only necessary column
3. Merge to Main Dataset to add credit score and population density
4. Save Main Dataset
